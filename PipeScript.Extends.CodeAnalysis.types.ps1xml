<!-- Generated with EZOut 2.0.3: Install-Module EZOut or https://github.com/StartAutomating/EZOut -->
<Types>
  <Type>
    <Name>Microsoft.CodeAnalysis.SyntaxNode</Name>
    <Members>
      <ScriptProperty>
        <Name>ByType</Name>
        <GetScriptBlock>
                        if (-not $this.'.ByType') {
    $ByType = [Collections.Generic.Dictionary[Type,Collections.Generic.List[PSObject]]]::new()
    foreach ($node in $this.FindAll({$true}, $true)) {
        $nodeType = $node.GetType()

        if (-not $ByType[$nodeType]) {
            $ByType[$nodeType] = [Collections.Generic.List[PSObject]]::new()
        }
        $ByType[$nodeType].Add($node)
    }
    Add-Member -InputObject $this -MemberType NoteProperty -Name '.ByType' -Value $ByType -Force
}

$this.'.ByType'

                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Text</Name>
        <GetScriptBlock>
                        if (-not $this.'.Text') {    
    $this | Add-Member NoteProperty '.Text' $this.GetText() -Force    
}

$this.'.Text'

                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>Microsoft.CodeAnalysis.SyntaxTree</Name>
    <Members>
      <ScriptProperty>
        <Name>ByType</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets CSharp AST Nodes by type
.DESCRIPTION
    Gets a dictionary of all nodes in a CSharp AST beneath this point, grouped by type.
.EXAMPLE
    (Parse-CSharp '"Hello World";').ByType
#&gt;


$this.Root.ByType

                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Text</Name>
        <GetScriptBlock>
                        if (-not $this.'.Text') {    
    $this | Add-Member NoteProperty '.Text' $this.GetText([Threading.CancellationToken]::None) -Force    
}

$this.'.Text'

                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
</Types>